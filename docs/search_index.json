[
["index.html", "O Zen do R Bem-vindo", " O Zen do R Caio Lente Bem-vindo Este é O Zen do R, seja bem-vindo! O objetivo deste livro é ensinar ao leitor algumas formas simples de melhorar a organização de seus projetos de análise de dados em R. Para auxiliar na fixação desses princípios, cada um dos capítulos é comparado com uma das oito práticas do Nobre Caminho Óctuplo do Budismo; assim como a Roda do Dharma, os caminhos deste livro têm a intenção de livrar o leitor do sofrimento (ao programar em R). O texto deste livro foi escrito por Caio Lente com o suporte, ajuda e revisão do time da Curso-R. Ele está disponível gratuitamente no Github sob a licença GNU GPLv3. Ele foi escrito em RMarkdown com o pacote bookdown. "],
["introducao.html", "1 Introdução 1.1 Sobre o livro 1.2 O que você vai aprender 1.3 O que você não vai aprender 1.4 Pré-requisitos 1.5 Principais referências", " 1 Introdução O Zen do R tem o objetivo de ser um livro sobre programação para não-programadores. Diferentemente dos manuais secos e técnicos com os quais geralmente nos deparamos na internet, o tom deste livro é leve e pretende ser bem-humorado; assim, a sua motivação principal é atrair o máximo possível de pessoas para um mundo onde a programação é uma ferramenta e não um obstáculo no processo de análise de dados. Aqui você vai ver com frequência o uso das primeira e segunda pessoas porque no fundo eu gostaria que o livro fosse como uma conversa. A escolha do R é parcialmente arbitrária. Nada impede de você usar Python para a análise de dados, mas ao longo de alguns anos de experiência os autores notaram que o fato de o R ter sido feito com análise de dados em mente acaba sendo uma vantagem muito difícil de ignorar. Fora isso, o tidyverse, as infinitas ferramentas do RStudio e o engajamento da comunidade fazem com que nós achemos o R a verdadeira linguagem do data science. Por isso, O Zen do R (caso não tenha ficado claro no título) vai abordar apenas fluxos de trabalho com a linguagem R de programação. 1.1 Sobre o livro A grande piada do livro é que o caminho para o fluxo ideal de programação é análogo ao caminho descrito pelo Budismo para a libertação do espírito. Parece muito estranho que essas duas coisas tenham alguma relação, mas a vida é uma boa metáfora para muitos processos que encontramos no dia-a-dia! 1.1.1 Budismo Eu acho o Budismo um assunto no geral muito interessante e pelo qual tenho um grande respeito. Por isso não gostaria que qualquer praticante se sentisse ofendido pelas comparações que aqui serão feitas. Para ler o O Zen do R você obviamente não precisa saber nada sobre o Budismo, mas vale a pena ter um breve contexto do que é o Nobre Caminho Óctuplo e para quê ele serve: O Nobre Caminho Óctuplo é um antigo resumo do caminho das práticas budistas que levam à libertação do samsara, o doloroso ciclo do renascimento. Ele consiste de oito práticas: compreensão correta, pensamento correto, fala correta, ação correta, meio de vida correto, esforço correto, consciência correta e concentração correta. — WIkipédia Todas essas oito práticas são bastante abstratas e se aplicam em inúmeras situações, fazendo com que se encaixem muito bem ao tópico que estamos trabalhando. Dessa forma, em cada capítulo você aprenderá sobre uma boa prática em projetos de análise de dados e, para gravar melhor a informação, será apresentado também a um dos oito caminhos. A ideia é utilizar os nomes e definições grandiosas e espirituais do Nobre Caminho Óctuplo como uma ferramenta de fixação do aprendizado. Pense no que você aprender nesse livro como um conjunto de práticas que, quando cumpridas, são capazes de livrá-lo da dor da programação. 1.1.2 Você é um não-programador? O que eu quero dizer com o termo “não-programador” no começo desse capítulo é meramente “uma pessoa que não tem treinamento formal em programação”. Eu, por exemplo, fiz Ciência da Computação e portanto não posso escapar do fato de que sou um programador. Se você é treinado em Estatística, mas precisa usar o R para fazer suas análises, então você provavelmente vai tirar um bom proveito deste livro. Aqui você não vai aprender a programar, mas sim a como fazer com que o seu fluxo de programação não atrapalhe o seu fluxo de análise! O ideal é que a programação te ajude e por isso saber usar a ferramenta de forma correta é essencial. 1.2 O que você vai aprender Essencialmente você vai aprender a usar dois pacotes e como trabalhar com quatro aspectos do processo de análise de dados: ambiente, versões, dados e arquivos. Não é necessário ler o livro em ordem porque cada uma dessas quatro sessões são completamente independentes! Os assuntos abordados são, em ordem: .RData e histórico: como fazer com que o RStudio não guarde nada que você fez para que você não fique mal acostumado (equivalente à Consciência Correta); Rproj e diretórios: como usar o conceito de “project” para organizar seu projeto e não se perder nos diretórios (equivalente ao Esforço Correto); Git e Github: como usar ferramentas de controle de versão para que você não corra o risco de perder seu progresso (equivalente à Compreensão Correta); Packrat: como usar o pacote packrat para manter suas dependências em ordem e atualizadas (equivalente ao Pensamento Correto); Data e data-raw: como organizar seus dados e scripts de tratamento em pastas com objetivos claros e distintos (equivalente à Ação Correta); RDSs intermediários: como quebrar o processo de tratamento em passos que podem ser salvos e reutilizados com custo mínimo (equivalente à Fala Correta); Reiniciar a sessão: como e porquê reiniciar sua sessão durante o processo de desenvolvimento (equivalente à Concentração Correta) e Arquivos minimalistas: como é o jeito ideal de dividir o seu código para que tudo seja rápido e fácil de encontrar (equivalente ao Meio de Vida Correto). Sinta-se livre para pular todos os tópicos sobre os quais você sentir que já sabe o suficiente. Mas não se iluda! Nenhum dos caminhos é inútil ou pode ser simplesmente ignorado… Se você quiser alcançar a cessação do sofrimento, você precisa seguir o Nobre Caminho Óctuplo. Ao deixar um desses princípios para trás, você está pedindo para ter que resolver algum problema lá na frente. 1.3 O que você não vai aprender Primeiramente, você não vai aprender a programar R. Esse tópico é extremamente extenso e já existem livros o suficiente para te ajudar (vide R for Data Science), então não vou me preocupar com os detalhes do seu código ou com qual guia de estilo você segue. Se você gosta de fazer códigos longos e velozes usando o base-r, se você ama as pipelines do tidyverse, se você paraleliza todos os seus loops… Nada disso importa aqui; não sou sua mãe para dizer qual é o melhor jeito de programar (e também não tenho paciência para entrar em mais nenhum debate “base vs. tidyverse”). Aqui você vai conhecer somente as melhores ferramentas para organizar o seu fluxo de programação. Apesar de terem nomes parecidos, O Zen do R e O Zen do Python são diferentes justamente por causa disso. O livro do Python pretende te dar sugestões de como organizar e escrever o seu código, o que não farei aqui. 1.4 Pré-requisitos Como talvez já tenha ficado claro, um dos principais pré-requisitos deste livro é saber a programar pelo menos um pouco de R. Você não precisa ser um profissional, mas, para ter a necessidade de melhorar o seu fluxo de análise, você antes precisa estar fazendo alguma análise. Fora isso, o segundo principal pré-requisito é um ambiente de desenvolvimento. Grande parte das dicas do livro são baseadas em funcionalidades integradas ao RStudio, então se você quiser tirar o maior proveito possível dos ensinamentos talvez valha à pena instalar a IDE. Ainda no tocante ao R, você precisará ter instalado pelo menos os três pacotes a seguir: # Conteúdo principal do livro install.packages(c(&quot;usethis&quot;, &quot;packrat&quot;)) # Se você quiser reproduzir os exemplos install.packages(&quot;tidyverse&quot;) Você também precisa de um computador funcionando com um sistema operacional razoavelmente moderno. E uma conexão à internet. 1.5 Principais referências O Zen do R se baseia em inúmeras referências que normalmente serão citadas juntamente com o próprio conteúdo. Mas algumas mais gerais acabariam sendo citadas o tempo todo e portanto acabarão ficando aqui: R for Data Science; bookdown: Authoring Books and Technical Documents with R Markdown; usethis; Packrat: Reproducible package management for R e O blog da Curso-R. "],
["ambiente.html", "2 Ambiente 2.1 Sobre o ambiente 2.2 .RData e .Rhistory 2.3 Rproj e diretórios", " 2 Ambiente 2.1 Sobre o ambiente Lorem ipsum 2.2 .RData e .Rhistory O fluxo ideal de análise de dados começa na escolha da ferramenta. Por ser uma linguagem especializada em estatística, o R é a primeira escolha de muitos usuários. Normalmente optar por programar em R também implica na escolha de uma IDE (Integrated Development Environment) que, em 90%1 dos casos, será o RStudio. O R, em combinação com o RStudio, possui um conjunto de funcionalidades cuja intenção é ajudar no processo de desenvolvimento. Entretanto, isso acaba deixando os programadores de R mal acostumados. Como uma pai coruja, o RStudio faz questão de lembrar tudo o que você fez anteriormente. Em sua configuração padrão, a IDE manterá na “memória” todos os últimos comandos executados, todos os dados utilizados e todos os objetos criados. Ao fechar e abrir o RStudio, essas informações serão recarregadas na memória como se o usuário nunca tivesse saído do programa. Esse recurso é tornado possível pela criação de dois arquivos ocultos: .RData e .Rhistory. O primeiro abriga absolutamente todos os objetos criados por uma sessão R, enquanto o segundo contém uma lista com os últimos comandos executados. Ao reabrir o RStudio, o conteúdo armazenados nestes arquivos será carregado no ambiente de trabalho atual como se nada tivesse acontecido. 2.2.1 Porque desistir desse recurso Apesar de ser uma ótima conveniência, assim como o pai coruja, esse tipo de funcionalidade pode deixar o programador mal acostumado. Se todos os resultados parciais de uma análise estiverem disponíveis a qualquer momento, diminui o incentivo para a escrita de código reprodutível e, se todo o histórico de comandos for acessível, acaba a necessidade de experimentos controlados. Um usuário que dependa ativamente do .RData para recuperar seus dados estará aos poucos contando cada vez mais com a sorte. Caso ele acidentalmente sobrescreva o objeto relevante e o código para recriá-lo já tenha sido apagado, não haverá nenhuma forma confiável de recuperar esses dados. Idealmente, todo o código necessário para uma análise de dados deve estar salvo em um arquivo .R perfeitamente reprodutível; assim, caso o programador cometa um engado, é possível executar aquele arquivo do início e obter novamente os objetos que estavam sendo utilizados. Arquivos reprodutíveis também tem uma outra vantagem: facilidade de compartilhamento. A menos que o programador pretenda sentar com seu colega para explicar como utilizar os objetos do .RData e do .Rhistory, não pode-se esperar que outra pessoa seja capaz de reproduzir uma análise a partir de arquivos incompletos. Deste modo, abandonar essa funcionalidade permite utilizar ferramentas de compartilhamento e controle de versão da maneira como elas foram idealizadas. Por fim, é importante notar uma desvantagem sutil mas muito relevante do uso do .RData. O R trata todos os objetos guardados na memória igualmente, sem levar em conta sua utilidade ou tamanho. Isso significa que ele também irá armazenar nos arquivos ocultos todas as bases de dados da sessão (não importando quão grande sejam). Isso faz com que o .RData normalmente seja um arquivo de múltiplos gigabytes. Ao reabrir o RStudio, todos esses dados serão recarregados e provavelmente farão com que o programador espere vários minutos até que ele possa voltar ao seu trabalho. Com o .RData é impossível ter controle sobre quais dados devem ser utilizados em cada sessão de programação. 2.2.2 Como desativar essa funcionalidade O processo de desabilitar o .RData e o .Rhistory é bastante simples e afeta todos os projetos do computador, então só é necessário passar por ele uma vez. Basta selecionar Tools &gt; Global Options… na aba de ferramentas do RStudio e então ajustar três configurações. No final a página de opções gerais deve ficar similar à da imagem abaixo: Se acostumar com sessões efêmeras não é uma tarefa fácil e um desconforto inicial é esperado. Pode ser que o programador ache entediante executar o mesmo código toda vez que abrir seu RStudio, mas é importante ter em mente que esse programa só está lá e pode ser executado inúmeras vezes porque o R não estará mais fazendo o trabalho do analista. 2.3 Rproj e diretórios Um programador iniciante corre o risco de não gerenciar seus projetos. Muitas vezes seus arquivos de código ficarão espalhados pelos infinitos diretórios de seu computador, esperando a primeira oportunidade de sumir para sempre. No R isso não é diferente: organizar arquivos é uma parte integral do processo de programação. Felizmente o RStudio possui uma ferramenta incrível que auxilia na tarefa de consolidar todos os recursos necessários para uma análise. Denominados “projetos”, eles não passam de pastas comuns com um arquivo .Rproj. O primeiro passo para organizar um bom ambiente de trabalho para análises de dados é criar um diretório onde todos os seus programas R podem viver. No meu computador eu tenho a pasta ~/Documents/Dev/R/, mas não importa onde ela está, apenas que seja um lugar o qual você lembre sem dificuldades. Tendo criado um esse workspace, é importante registrá-lo como o seu ambiente de trabalho no RStudio: basta selecioná-lo em Tools &gt; Global Options… &gt; Browse. Desta forma, toda vez que você iniciar um novo projeto no R, ele por parão usará essa nova pasta como ambiente padrão! Se você já tiver alguns arquivos espalhados pelo seu computador, traga eles para o seu diretório de programas. O segundo passo no processo de organização dos seus projetos é um pouco mais complexo e demanda mais atenção. Não basta juntar todos os arquivos em um só lugar, é importante colocá-los em subdiretórios para que a sua pasta não vire um equivalente virtual a uma mesa desorganizada. Assim como em uma mesa cada papel e cada utensílio tem uma gaveta, cada arquivo precisa fazer parte de um projeto. É nesse ponto que os “projetos” do RStudio dialogam com os projetos da vida real. Em uma empresa, cada cliente é um projeto; na academia, cada pesquisa é um projeto; e assim por diante. Cada projeto seu deve ter a sua própria pasta para que seja fácil encontrar todos os códigos e dados pertencentes a um único assunto. Mas esta não deve ser uma pasta comum, ela deve ser um projeto. O código listado abaixo demonstra como criar um projeto no RStudio. Basta apenas um comando e ele já fará tudo que for necessário para preparar o seu ambiente de desenvolvimento. usethis::create_project(&quot;~/Documents/Dev/R/Proj/&quot;) #&gt; ✔ Creating &#39;~/Documents/Dev/R/Proj/&#39; #&gt; ✔ Setting active project to &#39;~/Documents/Dev/R/Proj&#39; #&gt; ✔ Creating &#39;R/&#39; #&gt; ✔ Writing &#39;Proj.Rproj&#39; #&gt; ✔ Adding &#39;.Rproj.user&#39; to &#39;.gitignore&#39; #&gt; ✔ Opening &#39;~/Documents/Dev/R/Proj/&#39; in new RStudio session #&gt; ✔ Setting active project to &#39;Proj&#39; Cada linha da saída do comando representa algo que ele fez para preparar o projeto. A mais importante é a quarta linha, que cria o arquivo Proj.Rproj; ele indica para o RStudio que aquele diretório será a raiz de um projeto e que, portanto, várias outras funcionalidades podem ser ativadas. Por exemplo, clicando duas vezes neste arquivo já carrega o RStudio com os arquivos de Proj. Importante também é a pasta R/ criada. Nela você deve colocar todos os seus arquivos de código referentes àquele projeto com nomes que descrevam bem o que cada um faz. Se você seguiu o conselho anterior e juntou todos os seus códigos no seu diretório de trabalho, crie um projeto novo para cada grupo de programas que vocẽ tiver detectado. Talvez um para exercícios de R, um para cada cliente, um para uma nova ideia, etc. Cada um deles deve ter um nome descritivo e conter, em sua pasta R, todos os arquivos necessários para aquela análise. 2.3.1 Diretório de trabalho Mas a funcionalidade mais importante dentre todas as já citadas é o conceito do working directory ou diretório de trabalho. No canto esquerdo superior do Console do RStudio existe um caminho denominado diretório de trabalho, que é essencialmente a raiz do seu projeto. Muitos programadores que aprenderam R há muito tempo conhecem uma função chamada setwd(); se você nunca ouviu falar disso, não se preocupe e continue assim, mas se você costuma usá-la, siga prestando atenção. O R dá a possibilidade de mudar, instantaneamente, o diretório de trabalho. Isso que dizer que os caminhos relativos para arquivos podem mudar em questão de linhas. O exemplo abaixo demonstra superficialmente como isso funciona: # Abrindo dois arquivos em diretórios diferentes setwd(&quot;~/Downloads&quot;) a &lt;- read.csv(&quot;a.csv&quot;) setwd(&quot;~/Documents/Dev/R/Proj&quot;) b &lt;- read.csv(&quot;b.csv&quot;) write.csv(a, &quot;c.csv&quot;) Isso não parece tão problemático à primeira vista, mas usar setwd() cria um vício difícil de abandonar. Essa função estimula que os seus projetos continuem desorganizados com arquivos espalhados pelo computador, mas também confunde o programador na hora de salvar arquivos. Onde será salvo o arquivo c.csv? De onde veio o arquivo a.csv ou de onde veio o b.csv? E se essa linha fosse mudada de lugar para antes do segundo setwd()? São perguntas difíceis de responder caso você não esteja atento ao código todo. A solução que os projetos oferecem para isso é fazer com que o diretório de trabalho seja sempre a pasta do projeto. Neste caso é como se, ao abrir o RStudio, ele executasse o comando setwd(\"~/Documents/Dev/R/Proj\") automaticamente. Mas como ler então o arquivo a.csv? # Duas formas de ler a.csv a &lt;- read.csv(&quot;~/Downloads/a.csv&quot;) file.copy(&quot;~/Downloads/a.csv&quot;, &quot;a.csv&quot;) a &lt;- read.csv(&quot;a.csv&quot;) A primeira forma deixa explícito que aquele arquivo não faz parte do projeto e que portanto deve ser tratado como temporário. A segunda forma, mais indicada, é trazer o arquivo para dentro do projeto! Se ele é importante, é essencial que ele esteja junto com todos os outros dados de Proj. Com o código acima, o comando write.csv(a, \"c.csv\") salvaria c.csv dentro do projeto sem sombra de dúvidas. Os principais benefícios de não usar setwd() são dois: saber sempre onde os arquivos utilizados estão/serão salvos e poder compartilhar um projeto com qualquer pessoa. setwd() depende que seja explicitado um caminho dentro do seu computador e isso nem sempre é verdade no computador de outra pessoa; fazendo com que todos os arquivos estejam no projeto e com caminhos relativos nos códigos permite que outro usuário replique a sua análise sem ter que modificar nem uma linha do programa. Não tenho nenhuma estatística confiável sobre esse número, mas sei que ele não é 100% porque conheço pelo menos uma pessoa que programa R no neovim.↩ "],
["versoes.html", "3 Versões 3.1 Sobre versões 3.2 Git e Github 3.3 Packrat", " 3 Versões 3.1 Sobre versões 3.2 Git e Github Compreensão Correta: nossas ações têm consequências, então limpe seu caminho da confusão, do equívoco e do pensamento iludido 3.3 Packrat Pensamento Correto: considere tudo e todos como impermanentes, uma fonte de sofrimento "],
["dados.html", "4 Dados 4.1 Sobre dados 4.2 Data e data-raw 4.3 RDSs intermediários", " 4 Dados 4.1 Sobre dados 4.2 Data e data-raw Ação Correta: abstenha-se de matar, de roubar e da promiscuidade 4.3 RDSs intermediários Fala Correta: nunca fale algo que não é benéfico e fale somente o que é verdadeiro e benéfico "],
["arquivos.html", "5 Arquivos 5.1 Sobre os arquivos 5.2 Reiniciar a sessão 5.3 Arquivos minimalistas", " 5 Arquivos 5.1 Sobre os arquivos 5.2 Reiniciar a sessão Concentração Correta: procure um estado de consciência sem objeto ou sujeito 5.3 Arquivos minimalistas Meio de Vida Correto: não aceite tudo e não possua mais do que é estritamente necessário "]
]
